// Copyright 2024 The Silifuzz Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef THIRD_PARTY_SILIFUZZ_FUZZER_HASHTEST_TESTGENERATION_SYNTHESIZE_TEST_H_
#define THIRD_PARTY_SILIFUZZ_FUZZER_HASHTEST_TESTGENERATION_SYNTHESIZE_TEST_H_

#include <cstddef>
#include <cstdint>

#include "./fuzzer/hashtest/testgeneration/instruction_pool.h"
#include "./fuzzer/hashtest/testgeneration/synthesize_base.h"

namespace silifuzz {

struct SynthesisConfig {
  // The set of instructions that can be used as test instructions.
  const InstructionPool* ipool;

  // How often should flags generated by an instruction be captured?
  // Capturing flag has a runtime and code size cost.
  // 0 means flags are never captured, 1 means they are always captured.
  float flag_capture_rate = 0.5f;
  // When flags are captured, should the trap bit be masked?
  // This prevents a test from producing different results when it is being
  // traced. If the test process may be traced or debugged, set this to true.
  bool mask_trap_flag = true;

  // How many additional steps can be added to the test when adding branches?
  // For example, if a branch is added around two steps in the test schedule,
  // the two test steps become four steps - two on each side of the branch. In
  // all cases the same number of test steps will be executed every test
  // iteration, but the size of the test executable will increased as steps are
  // duplicated. A value of 0.5 means the test size will be ~50% larger than if
  // there were no branches. A value of 0.0 means that no branches will be added
  // to the test.
  float min_duplication_rate = 0.0f;
  float max_duplication_rate = 0.5f;
  // How many bits of entropy should be tested when branching?
  // 1 means there's an equal chance to take either side of the branch.
  // 2 means one side of the branch with be taken 75% of the time, and the
  // other 25%.
  // Increasing this value increases the predictability of branches, which can
  // increase the number of tests run a second. On the other hand, increasing
  // this number too much means one side of the branch is effectively never
  // taken. Different SDCs can respond differently to this parameter - some like
  // branch misses (or slower execution?) but most seem to like the throughput
  // that comes from semi-predictable branches.
  int branch_test_bits = 3;
};

// Generate a single iteration of a randomized hash function.
// A single iteration will update all of the entropy registers.
// The full test will iterate the loop body an arbitrary number of times.
// Every time the loop body is iterated, random inputs will be passed into test
// instructions, and the outputs will be folded back into the entropy pool.
// Because of how the loop body is designed, it should be possible to detect if
// data corruption occured during any of the iterations with high probability,
// no matter how many iterations are executed.
// The caller is responsible for setting up the initial entropy pools and
// generating instructions to iterate the loop body multiple times.
// Returns the maximum number of instructions that can be executed in the loop
// body.
size_t SynthesizeLoopBody(Rng& rng, const RegisterPool& rpool,
                          const SynthesisConfig& config,
                          InstructionBlock& block);

// Generate an instruction that decrements the GP register `dst` in place.
void SynthesizeGPRegDec(unsigned int dst, InstructionBlock& block);

// Generate a branch that will be taken if the flags indicate a value is greater
// than zero. Intended to build do-while loops that count down to zero.
// `offset` is the branch offset from the _begining_ of the instruction, not the
// end. This is different than how x86 encodes branch displacements.
void SynthesizeBackwardJnle(int32_t offset, InstructionBlock& block);

// Synthesize a return instruction.
void SynthesizeReturn(InstructionBlock& block);

// Synthesize `count` breakpoint traps. Useful for padding executable data.
void SynthesizeBreakpointTraps(size_t count, InstructionBlock& block);

}  // namespace silifuzz

#endif  // THIRD_PARTY_SILIFUZZ_FUZZER_HASHTEST_TESTGENERATION_SYNTHESIZE_TEST_H_
